AWSTemplateFormatVersion: 2010-09-09

Description: Pastor Carlos WordPress Website on AWS - Creates Entire Tech Stack

Metadata:

  Authors:
    Description: Jose Quijada (joquijada2010@gmail.com)
  License:
    Description: 'MIT'

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: AWS Parameters
      Parameters:
      - PublicAlbAcmCertificate
    - Label:
        default: Amazon VPC Parameters
      Parameters:
      - VpcCidr
      - VpcTenancy
      - PublicSubnet0Cidr
      - PublicSubnet1Cidr
      - WebSubnet0Cidr
      - WebSubnet1Cidr
      - DataSubnet0Cidr
      - DataSubnet1Cidr
    - Label:
        default: ALB Parameters
      Parameters:
        - PublicAlbAcmCertificate
    - Label:
        default: Web Parameters
      Parameters:
        - WebInstanceType
        - EC2KeyName
        - SslCertificate
    - Label:
        default: WordPress Parameters
      Parameters:
        - WPTitle
        - WPDomainName
        - WPAdminUsername
        - WPAdminPassword
        - WPAdminEmail
        - WPLocale
        - WPVersion
    - Label:
        default: Database Parameters
      Parameters:
        - DatabaseInstanceType
        - DatabaseName
        - DatabaseMasterUsername
        - DatabaseMasterPassword

Parameters:
  PublicAlbAcmCertificate:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[ Optional ] The AWS Certification Manager certificate ARN for the ALB certificate - this certificate should be created in the region you wish to run the ALB and must reference the WordPress domain name you use below.'
    Type: String
    Default: arn:aws:acm:us-east-1:433661183964:certificate/931ea42c-a26e-4d0f-9ac1-1e6977d8db34
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VpcTenancy:
    AllowedValues:
    - default
    - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  PublicSubnet0Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.200.0/24
    Description: CIDR block for Public subnet 0 located in Availability Zone 0
    Type: String
  PublicSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.201.0/24
    Description: CIDR block for Public subnet 1 located in Availability Zone 1
    Type: String
  DataSubnet0Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.100.0/24
    Description: CIDR block for data subnet 0 located in Availability Zone 0
    Type: String
  DataSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.101.0/24
    Description: CIDR block for data subnet 1 located in Availability Zone 1
    Type: String
  WebSubnet0Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/22
    Description: CIDR block for Web subnet 0 located in Availability Zone 0
    Type: String
  WebSubnet1Cidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.4.0/22
    Description: CIDR block for Web subnet 1 located in Availability Zone 1
    Type: String
  WebInstanceType:
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t2.large
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  EC2KeyName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyKeyPair
  SslCertificate:
    AllowedValues:
      - True
      - False
    Default: True
    Description: Is there an ACM SSL Certificate attached to the Public Alb?
    Type: String
  WPTitle:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9 _-]*)([a-zA-Z0-9])$
    Description: The WordPress website title.
    Type: String
    Default: 'The Way with Pastor Carlos'
  WPDomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: '[ Optional ] The main domain name of the WordPress site (e.g. example.com). Leave empty to use the ALB DNS name for the WordPress site.'
    Type: String
    Default: 'thewaywithpastorcarlos.org'
  WPAdminUsername:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The WordPress admin username.
    Type: String
    Default: 'admin'
  WPAdminPassword:
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
    Description: The WordPress admin password.
    Type: String
    NoEcho: true
    # TODO: Store below in SSM and read it from there
    Default: Latambora1
  WPAdminEmail:
    AllowedPattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
    Description: The WordPress admin email address.
    Type: String
    Default: 'joquijada2010@gmail.com'
  WPLocale:
    Description: The main language of the WordPress site, as per https://codex.WordPress.org/Installing_WordPress_in_Your_Language. The default is 'en_GB'.
    Type: String
    Default: en_GB
  WPVersion:
    AllowedValues:
      - latest
      - nightly
      - 4.5
      - 4.6
      - 4.7
      - 4.8
      - 4.9
      - 5.1
    Default: 5.1
    Description: The WordPress version (make sure this version is compatible with the PHP version selected above).
    Type: String
  DatabaseInstanceType:
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.r3.large
    ConstraintDescription: Must be a valid RDS instance class.
    Default: db.t2.medium
    Description: The Amazon RDS database instance class.
    Type: String
  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master database name.
    Type: String
    Default: 'PastorCarlos'
  DatabaseMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters and be at least 8 characters.
    MaxLength: 16
    MinLength: 1
    Type: String
    Default: 'admin'
  DatabaseMasterPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
    Description: The Amazon RDS master password.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
    # TODO: Store below in SSM and read it from there
    Default: Latambora1

Conditions:
  NoSslCertificate:
    !Equals [ False, !Ref SslCertificate ]
  NoWPDomainName:
    !Equals [ '', !Ref WPDomainName ]

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0947d2ba12ee1ff75
      AvailabilityZones:
      - us-east-1a
      - us-east-1b

Resources:
  # VPC
  PastorCarlosPublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !FindInMap [ RegionMap, !Ref 'AWS::Region', AvailabilityZones ] ]
      CidrBlock: !Ref PublicSubnet0Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosPublicSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !FindInMap [ RegionMap, !Ref 'AWS::Region', AvailabilityZones ] ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosPublicSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosWebSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !FindInMap [ RegionMap, !Ref 'AWS::Region', AvailabilityZones ] ]
      CidrBlock: !Ref WebSubnet0Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosWebSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosWebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !FindInMap [ RegionMap, !Ref 'AWS::Region', AvailabilityZones ] ]
      CidrBlock: !Ref WebSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosWebSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosWebSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PastorCarlosNatRouteTable0
      SubnetId: !Ref PastorCarlosWebSubnet0
  PastorCarlosWebSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PastorCarlosNatRouteTable1
      SubnetId: !Ref PastorCarlosWebSubnet1
  PastorCarlosDataSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !FindInMap [ RegionMap, !Ref 'AWS::Region', AvailabilityZones ] ]
      CidrBlock: !Ref DataSubnet0Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosDataSubnet0 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosDataSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !FindInMap [ RegionMap, !Ref 'AWS::Region', AvailabilityZones ] ]
      CidrBlock: !Ref DataSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosDataSubnet1 / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosDataSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PastorCarlosNatRouteTable0
      SubnetId: !Ref PastorCarlosDataSubnet0
  PastorCarlosDataSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PastorCarlosNatRouteTable1
      SubnetId: !Ref PastorCarlosDataSubnet1
  PastorCarlosInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosInternetGateway / ', !Ref 'AWS::StackName' ] ]
  PastorCarlosAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref PastorCarlosInternetGateway
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosNatEIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PastorCarlosNatGateway0:
    Type: AWS::EC2::NatGateway
    DependsOn: PastorCarlosAttachInternetGateway
    Properties:
      AllocationId: !GetAtt PastorCarlosNatEIP0.AllocationId
      SubnetId: !Ref PastorCarlosPublicSubnet0
  PastorCarlosNatRoute0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PastorCarlosNatRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PastorCarlosNatGateway0
  PastorCarlosNatRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['PastorCarlosNatRouteTable0 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosNatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PastorCarlosNatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: PastorCarlosAttachInternetGateway
    Properties:
      AllocationId: !GetAtt PastorCarlosNatEIP1.AllocationId
      SubnetId: !Ref PastorCarlosPublicSubnet1
  PastorCarlosNatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PastorCarlosNatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PastorCarlosNatGateway1
  PastorCarlosNatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosNatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: PastorCarlosAttachInternetGateway
    Properties:
      RouteTableId: !Ref PastorCarlosPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref PastorCarlosInternetGateway
  PastorCarlosPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosPublicRouteTable / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosPublicRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PastorCarlosPublicSubnet0
      RouteTableId: !Ref PastorCarlosPublicRouteTable
  PastorCarlosPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PastorCarlosPublicSubnet1
      RouteTableId: !Ref PastorCarlosPublicRouteTable
  PastorCarlosVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PastorCarlosVpc / ', !Ref 'AWS::StackName' ] ]
  PastorCarlosVpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt PastorCarlosVpcFlowLogsRole.Arn
      LogGroupName: !Join [ '', [ !Ref 'AWS::StackName', '-FlowLog' ] ]
      ResourceId: !Ref PastorCarlosVpc
      ResourceType: VPC
      TrafficType: ALL
  PastorCarlosVpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
  PastorCarlosVpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'

  # Security Groups
  PastorCarlosDatabaseSecurityGroup:
    DependsOn: [PastorCarlosVpc]
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Amazon RDS cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          # TODO: Allow access to DB from public space??? During troubleshooting phase, yes
          #SourceSecurityGroupId: !Ref PastorCarlosWebSecurityGroup
          CidrIp: 0.0.0.0/0
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosPublicAlbSecurityGroup:
    DependsOn: [PastorCarlosVpc]
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref PastorCarlosVpc
  PastorCarlosWebSecurityGroup:
    DependsOn: [PastorCarlosVpc]
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          # TODO: Allow incoming from ALB only?
          SourceSecurityGroupId: !Ref PastorCarlosPublicAlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref PastorCarlosPublicAlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # I want to be able to acce3ss this EC2 from everywhere
      VpcId: !Ref PastorCarlosVpc

  # Volume
  PastorCarlosNewVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: 100
      Encrypted: false
      AvailabilityZone: !Select [0, !FindInMap [ RegionMap, !Ref 'AWS::Region', AvailabilityZones ] ]
    DeletionPolicy: Snapshot

  # EC2
  PastorCarlosWebServer:
    DependsOn: [PastorCarlosVpc, PastorCarlosWebSecurityGroup, PastorCarlosDatabaseCluster, PastorCarlosPublicApplicationLoadBalancer, PastorCarlosDatabaseSecurityGroup, PastorCarlosDatabaseInstance0, PastorCarlosDatabaseInstance1]
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - build_wordpress
            - install_wordpress
            - start_webserver
        build_wordpress:
          files:
            /tmp/install_wordpress.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "\n",
                    "# install wp-cli\n",
                    "if [ ! -f /bin/wp/wp-cli.phar ]; then\n",
                    "   curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n",
                    "   chmod +x /bin/wp\n",
                    "fi\n",
                    "\n",
                    "# make site directory\n",
                    "if [ ! -d /var/www/wordpress ]; then\n",
                    "   mkdir -p /var/www/wordpress/\n",
                    "\n",
                    "   cd /var/www/wordpress/\n",
                    "   # install wordpress if not installed\n",
                    "   # use public alb host name if wp domain name was empty\n",
                    "   if ! $(wp core is-installed --allow-root); then\n",
                    "       wp core download --version='", !Ref WPVersion, "' --locale='", !Ref WPLocale, "' --allow-root\n",
                    "       wp core config --dbname='", !Ref DatabaseName, "' --dbuser='", !Ref DatabaseMasterUsername, "' --dbpass='", !Ref DatabaseMasterPassword, "' --dbhost='", !GetAtt PastorCarlosDatabaseCluster.Endpoint.Address, "' --dbprefix=wp_ --allow-root\n",
                    "       wp core install --url=", !If [ NoWPDomainName, !GetAtt PastorCarlosPublicApplicationLoadBalancer.DNSName, !Join [ "", [ "'http://www.", !Ref WPDomainName, "'" ] ] ], " --title='", !Ref WPTitle, "' --admin_user='", !Ref WPAdminUsername, "' --admin_password='", !Ref WPAdminPassword, "' --admin_email='", !Ref WPAdminEmail, "' --skip-email --allow-root\n",
                    #"       wp plugin install w3-total-cache\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_HOME', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/wp-config.php\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_SITEURL', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/wp-config.php\n",
                    "       # enable HTTPS in wp-config.php if ACM Public SSL Certificate parameter was not empty\n",
                            !If [ NoSslCertificate, !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\# No ACM Public SSL Certificate \" /var/www/wordpress/wp-config.php\n" ] ] , !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\$_SERVER['HTTPS'] = 'on';\" /var/www/wordpress/wp-config.php\n" ] ] ],
                    "\n",
                    "       # set permissions of wordpress site directories\n",
                    "       chown -R apache:apache /var/www/wordpress/\n",
                    "       chmod u+wrx /var/www/wordpress/wp-content/*\n",
                    #"       if [ ! -f /var/www/wordpress/opcache-instanceid.php ]; then\n",
                    #"         wget -P /var/www/wordpress/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php\n",
                    #"       fi\n",
                    "   fi\n",
                    "   RESULT=$?\n",
                    "   if [ $RESULT -eq 0 ]; then\n",
                    "       touch /var/www/wordpress/wordpress.initialized\n",
                    "         else\n",
                    "       touch /var/www/wordpress/wordpress.failed\n",
                    "   fi\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        install_wordpress:
          commands:
            install_wordpress:
              command: ./install_wordpress.sh
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      #IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      #SubnetId: !Ref PastorCarlosWebSubnet0
      #SecurityGroupIds:
      #  - !GetAtt PastorCarlosWebSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref PastorCarlosWebSecurityGroup
          # I want to be able to SSH to this EC2 from anywhere, so associated it to a public subnet
          SubnetId: !Ref PastorCarlosPublicSubnet0
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum -y install awslogs
            yum -y install httpd
            yum -y install mysql
            yum -y install php
            yum -y install php-devel
            yum -y install php-pear
            yum -y install php-mysqlnd
            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource PastorCarlosWebServer --region ${AWS::Region}

  # ALB
  PastorCarlosPublicAlbListenerNoSslCertificate:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref PastorCarlosPublicAlbTargetGroup
      LoadBalancerArn: !Ref PastorCarlosPublicApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  PastorCarlosPublicAlbListenerSslCertificate:
    #Condition: SslCertificate
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref PublicAlbAcmCertificate
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref PastorCarlosPublicAlbTargetGroup
      LoadBalancerArn: !Ref PastorCarlosPublicApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
  PastorCarlosPublicApplicationLoadBalancer:
    DependsOn: [PastorCarlosPublicAlbSecurityGroup]
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PastorCarlosPublicSubnet0
      - !Ref PastorCarlosPublicSubnet1
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 60
      SecurityGroups:
      - !Ref PastorCarlosPublicAlbSecurityGroup
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'Public ALB / ', !Ref 'AWS::StackName' ] ]
  PastorCarlosPublicAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /wp-login.php
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      #Tags:
      #- Key: Name
      #  Value: !Join [ '', [ 'Public ALB / ', !Ref 'AWS::StackName' ] ]
      UnhealthyThresholdCount: 5
      VpcId: !Ref PastorCarlosVpc
      Targets:
        - Id: !Ref PastorCarlosWebServer

  # CDN

  # RDS
  PastorCarlosDatabaseCluster:
    DependsOn: [PastorCarlosVpc, PastorCarlosDatabaseSecurityGroup]
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 30
      DatabaseName: !Ref DatabaseName
      DBSubnetGroupName: !Ref PastorCarlosDataSubnetGroup
      Engine: aurora
      #KmsKeyId:
      #  !If [ UseAWS-ManagedCMK, !Ref 'AWS::NoValue', !Ref DatabaseCmk ]
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      Port: 3306
      #StorageEncrypted: !Ref DatabaseEncrpytedBoolean
      #SnapshotIdentifier: !If [ NoSnapshot, !Ref 'AWS::NoValue', !Ref DatabaseRestoreSnapshot]
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WordPress / ', !Ref 'AWS::StackName' ] ]
      VpcSecurityGroupIds:
      - !Ref PastorCarlosDatabaseSecurityGroup
  PastorCarlosDatabaseInstance0:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref PastorCarlosDatabaseCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBSubnetGroupName: !Ref PastorCarlosDataSubnetGroup
      Engine: aurora
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WordPress / ', !Ref 'AWS::StackName' ] ]
  PastorCarlosDatabaseInstance1:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref PastorCarlosDatabaseCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBSubnetGroupName: !Ref PastorCarlosDataSubnetGroup
      Engine: aurora
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WordPress / ', !Ref 'AWS::StackName' ] ]
  PastorCarlosDataSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Database Subnet Group for WordPress
      SubnetIds:
      - !Ref PastorCarlosPublicSubnet0
      - !Ref PastorCarlosPublicSubnet1
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'WordPress / ', !Ref 'AWS::StackName' ] ]

  # S3
